{"version":3,"sources":["tr-trustpass.js"],"names":["window","angular","trTrustpass","$compile","$timeout","link","scope","element","attrs","ngModel","transclude","validatePasswordStrength","password","checklist","test","tests","options","hasOwnProperty","isAllValid","checkIsAllValid","$setValidity","flag","extend","lowercase","uppercase","number","special","minimum","maximum","word","toggle","minlength","maxlength","keepHeight","messageGuide","lowercaseLabel","uppercaseLabel","numberLabel","specialLabel","minimumLabel","maximumLabel","wordLabel","messageDone","ngMaxlength","ngMinlength","p","length","$parsers","unshift","$watch","$render","$viewValue","val","isVisible","bind","$apply","template","parentNode","insertBefore","nextSibling","initialHeight","clientHeight","restrict","require","value","module","directive","$inject"],"mappings":"CAAA,SAAUA,EAAQC,GAChB,YAeA,SAASC,GAAYC,EAAUC,GAY7B,QAASC,GAAKC,EAAOC,EAASC,EAAOC,EAASC,GAgI5C,QAASC,GAAyBC,GAChC,GAAIC,KAGJ,KAAI,GAAIC,KAAQC,GAEXT,EAAMU,QAAQF,MAAU,IAEzBD,EAAUC,KAAQC,EAAME,eAAeH,IAAQC,EAAMD,GAAMF,GAQ/D,OAJAN,GAAMO,UAAYA,EAClBP,EAAMY,WAAaC,EAAgBN,GACnCJ,EAAQW,aAAa,YAAad,EAAMY,YAEjCN,EAST,QAASO,GAAgBN,GACvB,IAAI,GAAIQ,KAAQR,GAEd,GAAGA,EAAUQ,MAAU,EACrB,OAAO,CAGX,QAAO,EA9JTf,EAAMY,YAAa,EACnBZ,EAAMO,aAGNP,EAAMU,QAAUf,EAAQqB,QAIpBC,WAAW,EACXC,WAAW,EACXC,QAAQ,EACRC,SAAS,EACTC,SAAS,EACTC,SAAS,EACTC,MAAM,EAGNC,QAAQ,EACRC,UAAW,EACXC,UAAW,GACXC,YAAY,EACZC,aAAc,GAGdC,eAAgB,0BAChBC,eAAgB,0BAChBC,YAAa,aACbC,aAAc,wBACdC,aAAc,qBACdC,aAAc,qBACdC,UAAW,0BACXC,YAAa,mCACdpC,EAAMJ,cAMNM,EAAMmC,aAAenC,EAAMwB,aAC5B1B,EAAMU,QAAQgB,UAAYxB,EAAMmC,aAAenC,EAAMwB,YAEpDxB,EAAMoC,aAAepC,EAAMuB,aAC5BzB,EAAMU,QAAQe,UAAYvB,EAAMoC,aAAepC,EAAMuB,UAQvD,IAAIhB,IACFc,KAAW,SAASgB,GAAK,SAAOA,IAAK,OAAO/B,KAAK+B,KACjDtB,UAAW,SAASsB,GAAK,SAAOA,IAAK,QAAQ/B,KAAK+B,KAClDrB,UAAW,SAASqB,GAAK,SAAOA,IAAK,QAAQ/B,KAAK+B,KAClDpB,OAAW,SAASoB,GAAK,SAAOA,IAAK,KAAK/B,KAAK+B,KAC/CnB,QAAW,SAASmB,GAAK,SAAOA,IAAK,QAAQ/B,KAAK+B,KAClDlB,QAAW,SAASkB,GAAK,SAAOA,GAAKA,EAAEC,QAAUxC,EAAMU,QAAQe,YAC/DH,QAAW,SAASiB,GAAK,SAAOA,GAAKA,EAAEC,QAAUxC,EAAMU,QAAQgB,YAKjEvB,GAAQsC,SAASC,QAAQrC,GAGzBL,EAAM2C,OAAO,QAAStC,GAItBF,EAAQyC,QAAU,YACbzC,EAAQ0C,YAAqC,KAAvB1C,EAAQ0C,aAC/B5C,EAAQ6C,IAAI3C,EAAQ0C,aAKxB7C,EAAM+C,WAAa/C,EAAMU,QAAQc,OAC9BxB,EAAMU,QAAQc,SACfxB,EAAM+C,WAAY,EAClB9C,EACG+C,KAAK,QAAS,WACbhD,EAAM+C,WAAY,EAClB/C,EAAMiD,WAEPD,KAAK,OAAQ,WACZhD,EAAM+C,WAAY,EAClB/C,EAAMiD,WAQZ,IAAIC,GAAWvD,EAAQM,QACrB,qiDAcFA,GAAQ,GAAGkD,WAAWC,aAAaF,EAAS,GAAIjD,EAAQ,GAAGoD,aAC3DxD,EAASqD,GAAUlD,GAGhBA,EAAMU,QAAQiB,YACf7B,EAAS,WACPE,EAAMsD,cAAgBrD,EAAQ,GAAGoD,YAAYE,aAAe,OA/HlE,OACEC,SAAU,IACVC,QAAS,UACTzD,OACE0D,MAAO,WACP9D,YAAa,gBAEfG,KAAMA,GAfVJ,EACGgE,OAAO,kBACPC,UAAU,cAAehE,GAE5BA,EAAYiE,SAAW,WAAY,aAqLlCnE,OAAQA,OAAOC","file":"tr-trustpass.min.js","sourcesContent":["(function(window, angular) {\r\n  'use strict';\r\n\r\n  /**\r\n   * @ngdoc directive\r\n   * @module trTrustpass\r\n   * @name trTrustpass\r\n   * @restrict A\r\n   * @scope\r\n   */\r\n  angular\r\n    .module('trTrustpass', [])\r\n    .directive('trTrustpass', trTrustpass);\r\n\r\n  trTrustpass.$inject = ['$compile', '$timeout'];\r\n\r\n  function trTrustpass($compile, $timeout) {\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      scope: {\r\n        value: '=ngModel',\r\n        trTrustpass: '=trTrustpass'\r\n      },\r\n      link: link\r\n    };\r\n\r\n    function link(scope, element, attrs, ngModel, transclude) {\r\n\r\n      scope.isAllValid = false;\r\n      scope.checklist = {};\r\n\r\n      // Extend our default options with user provided options\r\n      scope.options = angular.extend({\r\n\r\n          // Tests\r\n          // \"A word character\": a character from a-z, A-Z, 0-9, including the _ (underscore) character.\r\n          lowercase: true, // Find a-z\r\n          uppercase: true, // Find A-Z\r\n          number: true, // Find 0-9\r\n          special: true, // Find a non-word character or the _ (underscore) character\r\n          minimum: true, // Check minimum length\r\n          maximum: false, // Check maximum length\r\n          word: false, // Find a word character\r\n\r\n          // Settings\r\n          toggle: false,\r\n          minlength: 8,\r\n          maxlength: 50,\r\n          keepHeight: false,\r\n          messageGuide: '',\r\n\r\n          // Text\r\n          lowercaseLabel: 'One lowercase character',\r\n          uppercaseLabel: 'One uppercase character',\r\n          numberLabel: 'One number',\r\n          specialLabel: 'One special character',\r\n          minimumLabel: 'characters minimum',\r\n          maximumLabel: 'characters maximum',\r\n          wordLabel: 'Alphanumeric characters',\r\n          messageDone: 'Great! Your password is secure.'\r\n      }, scope.trTrustpass);\r\n\r\n\r\n      /**\r\n       * Override options with min/maxlength attributes (either native HTML)\r\n       */\r\n      if(attrs.ngMaxlength || attrs.maxlength) {\r\n        scope.options.maxlength = attrs.ngMaxlength || attrs.maxlength;\r\n      }\r\n      if(attrs.ngMinlength || attrs.minlength) {\r\n        scope.options.minlength = attrs.ngMinlength || attrs.minlength;\r\n      }\r\n\r\n      /**\r\n       * Available tests to run\r\n       * Tests should return true or false\r\n       * Should test at least for one character occurance\r\n       */\r\n      var tests = {\r\n        word:      function(p) { return p && /[\\w]/.test(p) ? true : false; },\r\n        lowercase: function(p) { return p && /[a-z]/.test(p) ? true : false; },\r\n        uppercase: function(p) { return p && /[A-Z]/.test(p) ? true : false; },\r\n        number:    function(p) { return p && /\\d/.test(p) ? true : false; },\r\n        special:   function(p) { return p && /[_\\W]/.test(p) ? true : false; },\r\n        minimum:   function(p) { return p && p.length >= scope.options.minlength ? true : false; },\r\n        maximum:   function(p) { return p && p.length <= scope.options.maxlength ? true : false; },\r\n      };\r\n\r\n\r\n      // Add our custom parser into model's $parsers\r\n      ngModel.$parsers.unshift(validatePasswordStrength);\r\n\r\n      // Watch for changes in value\r\n      scope.$watch('value', validatePasswordStrength);\r\n\r\n      // Update the passport field whenever the value on the scope changes from outside\r\n      // Now updates the passport field if the value on the scope is reset to an empty string\r\n      ngModel.$render = function() {\r\n        if(ngModel.$viewValue || ngModel.$viewValue === '') {\r\n          element.val(ngModel.$viewValue);\r\n        }\r\n      };\r\n\r\n      // If toggling is in use, toggle on element focus\r\n      scope.isVisible = !scope.options.toggle;\r\n      if(scope.options.toggle) {\r\n        scope.isVisible = false;\r\n        element\r\n          .bind('focus', function() {\r\n            scope.isVisible = true;\r\n            scope.$apply();\r\n          })\r\n          .bind('blur', function() {\r\n            scope.isVisible = false;\r\n            scope.$apply();\r\n          });\r\n      }\r\n\r\n      /**\r\n       * Append the template below input\r\n       * This could be done with\r\n       */\r\n      var template = angular.element(\r\n        '<section class=\"trustpass\" ng-show=\"isVisible\" ng-style=\"{height: (options.keepHeight ? initialHeight : \\'auto\\')}\">' +\r\n          '<div class=\"trustpass-guide\" ng-if=\"isVisible && !isAllValid && options.messageGuide\" ng-bind=\"options.messageGuide\"></div>' +\r\n          '<ul class=\"trustpass-checklist\" ng-show=\"isVisible && !isAllValid\">' +\r\n            '<li ng-class=\"{ \\'trustpass-nope\\': !checklist.word,      \\'trustpass-yep\\': checklist.word      }\" ng-if=\"options.word\">{{ ::options.wordLabel }}</li>' +\r\n            '<li ng-class=\"{ \\'trustpass-nope\\': !checklist.lowercase, \\'trustpass-yep\\': checklist.lowercase }\" ng-if=\"options.lowercase\">{{ ::options.lowercaseLabel }}</li>' +\r\n            '<li ng-class=\"{ \\'trustpass-nope\\': !checklist.uppercase, \\'trustpass-yep\\': checklist.uppercase }\" ng-if=\"options.uppercase\">{{ ::options.uppercaseLabel }}</li>' +\r\n            '<li ng-class=\"{ \\'trustpass-nope\\': !checklist.number,    \\'trustpass-yep\\': checklist.number    }\" ng-if=\"options.number\">{{ ::options.numberLabel }}</li>' +\r\n            '<li ng-class=\"{ \\'trustpass-nope\\': !checklist.special,   \\'trustpass-yep\\': checklist.special   }\" ng-if=\"options.special\">{{ ::options.specialLabel }}</li>' +\r\n            '<li ng-class=\"{ \\'trustpass-nope\\': !checklist.minimum,   \\'trustpass-yep\\': checklist.minimum   }\" ng-if=\"options.minimum\">{{ ::options.minlength }} {{ ::options.minimumLabel }}</li>' +\r\n            '<li ng-class=\"{ \\'trustpass-nope\\': !checklist.maximum,   \\'trustpass-yep\\': checklist.maximum   }\" ng-if=\"options.maximum\">{{ ::options.maxlength }} {{ ::options.maximumLabel }}</li>' +\r\n          '</ul>' +\r\n          '<div class=\"trustpass-done\" ng-show=\"isVisible && isAllValid\" ng-bind=\"options.messageDone\"></div>' +\r\n        '</section>');\r\n      // This would be jQuery's contentTr.insertAfter(element); ...but we don't want to depend on jQuery here.\r\n      element[0].parentNode.insertBefore(template[0], element[0].nextSibling);\r\n      $compile(template)(scope);\r\n\r\n      // If keepHeight is true, save the initial height of the dropdown\r\n      if(scope.options.keepHeight) {\r\n        $timeout(function(){\r\n          scope.initialHeight = element[0].nextSibling.clientHeight + 'px';\r\n        });\r\n      }\r\n\r\n      /**\r\n       * Run validators for a string\r\n       * It's absolutely vital this returns the original string for ngModel.$parsers\r\n       *\r\n       * @param String password\r\n       * @return String\r\n       */\r\n      function validatePasswordStrength(password) {\r\n        var checklist = {};\r\n\r\n        // Loop trough possible tests\r\n        for(var test in tests) {\r\n          // Is test enabled?\r\n          if(scope.options[test] === true) {\r\n            // Run test (but only if we have a password string)\r\n            checklist[test] = tests.hasOwnProperty(test) ? tests[test](password) : false;\r\n          }\r\n        }\r\n\r\n        scope.checklist = checklist;\r\n        scope.isAllValid = checkIsAllValid(checklist);\r\n        ngModel.$setValidity('trustpass', scope.isAllValid);\r\n\r\n        return password;\r\n      }\r\n\r\n      /**\r\n       * Determine if all required tests pass\r\n       *\r\n       * @param Object checklist\r\n       * @return Boolean\r\n       */\r\n      function checkIsAllValid(checklist) {\r\n        for(var flag in checklist) {\r\n          // Check if the test is supposed to be validated and if the test fails\r\n          if(checklist[flag] === false) {\r\n            return false;\r\n          }\r\n        }\r\n        return true;\r\n      }\r\n\r\n    }\r\n\r\n  }\r\n\r\n})(window, window.angular);\r\n"],"sourceRoot":"/source/"}